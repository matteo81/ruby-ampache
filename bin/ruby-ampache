#!/usr/bin/env ruby
# encoding:  UTF-8

def secure_require(name)
  begin
    require name
  rescue LoadError
    $stderr.print "#{File.basename(__FILE__)} requires #{name} gem to work\n Please install it with: gem install #{name}\n"
    exit
  end
end

require 'rubygems'
secure_require 'highline'
secure_require 'highline/import'
secure_require 'parseconfig'
secure_require 'nokogiri'
secure_require 'iconv'
require File.join(File.dirname(__FILE__), '..', 'lib', 'lib-ampache')
require File.join(File.dirname(__FILE__), '..', 'lib', 'lib-classes')

# XXX monkey patch for utf8 on ruby 1.9
if /^1\.9/ === RUBY_VERSION then
  class HighLine
    def wrap (text)
      text = text.force_encoding("UTF-8")
      wrapped = []
      text.each_line do |line|
        while line =~ /([^\n]{#{@wrap_at + 1},})/
          search = $1.dup
          replace = $1.dup
          if index = replace.rindex(" ", @wrap_at)
            replace[index, 1] = "\n"
            replace.sub!(/\n[ \t]+/, "\n")
            line.sub!(search, replace)
          else
            line[$~.begin(1) + @wrap_at, 0] = "\n"
          end
        end
        wrapped << line
      end
      return wrapped.join
    end
  end
end

# Ampache ruby parameters
begin
  ar_config = ParseConfig.new(File.expand_path('~/.ruby-ampache'))
rescue
  raise "\nPlease create a .ruby-ampache file on your home\n See http://github.com/ghedamat/ruby-ampache for infos\n"
end

# ruby-ampache highline version
$terminal.wrap_at = 80
$terminal.page_at = 22

def print_songs(album)
  choose do |menu|
    menu.prompt = "PICK A SONG (4..N), ADD WHOLE ALBUM (3), GO BACK(2) or BACK TO MENU(1)"
    menu.choice(HighLine.new.color "BACK TO MENU", :red)
    menu.choice(HighLine.new.color "BACK", :magenta) { print_albums(album.artist.albums) }
    menu.choice(HighLine.new.color "ADD WHOLE ALBUM", :green) { album.add_to_playlist(@pl); print_albums(album.artist.albums) }
    album.songs.each do |s|
      menu.choice(s.title) { s.add_to_playlist(@pl); print_songs(album) }

    end
  end
end

def print_albums(albums)
  choose do |menu|
    menu.prompt = "CHOOSE AN ALBUM (4..N), ADD WHOLE ARTIST(3), BACK TO LIST(2) or BACK TO MENU (1) "
    menu.choice(HighLine.new.color "BACK TO MENU", :red)
    menu.choice(HighLine.new.color "BACK", :magenta) { print_artists(@ar.artists) }
    menu.choice(HighLine.new.color "ADD WHOLE ARTIST", :green) { albums.first.artist.add_to_playlist(@pl); print_artists(@ar.artists) }

    albums.each do |a|
      menu.choice(a.name) { print_songs(a) }
    end
  end
end

def print_artists(artists)
  if artists.empty?
    reset_token
    say("No results, retrying")
    artists = @ar.artists
  end
  choose do |menu|
    menu.prompt = "CHOOSE AN ARTIST (2..N) or  BACK TO MENU (1)"
    menu.choice(HighLine.new.color "BACK TO MENU", :red)
    artists.each do |a|
      menu.choice(a.name) { print_albums(a.albums) }
    end
  end
end

def print_playlist
  if @pl.list.empty?
    say(HighLine.new.color "No more songs!\n",:red)
    return
  end
  say(HighLine.new.color "Next Songs:", :yellow)
  @pl.list.each_with_index do |p,i|
    say(HighLine.new.color(i.to_s + " : ", :green) + p.title)
  end
  puts ""
end

# try to reset token if it's not valid
def reset_token
  @ar.token = @ar.getAuthToken(@ar.user, @ar.psw)
end

def credits
  s = <<STR
Ruby-Ampache: Ultra-simple, low-featured command line Ampache player (uses mplayer for playing)
Author: Mattia Gheda aka ghedamat
Homepage: http://github.com/ghedamat/ruby-ampache
Author-mail: thamayor@gmail.com

Usage: pick your choice from the menu. 
       You can start playing songs from your ampache server right now! 
       Simply choose an artist,an album or a single song
       You can queue up as many albums you like
STR
  return s
end

# MAIN
@ar =AmpacheRuby.new(ar_config.get_value('AMPACHE_HOST'), ar_config.get_value('AMPACHE_USER'), ar_config.get_value('AMPACHE_USER_PSW'))
$options = {}
$options[:path] = ar_config.get_value('MPLAYER_PATH')
$options[:timeout] = ar_config.get_value('TIMEOUT').to_i
@pl = AmpachePlaylist.new

say(HighLine.new.color "Welcome To ruby Ampache\n", :green)
while true
  choose do |menu|
    menu.prompt = HighLine.new.color("pick your choice!\n", :yellow)
    menu.choice(HighLine.new.color("add artist/album/song to the playlist", :green)) { print_artists(@ar.artists); say(HighLine.new.color(@pl.now_playing, :red)) }
    menu.choice(HighLine.new.color("search artist", :green)) { print_artists(@ar.artists(ask(HighLine.new.color("Artist name?", :red)))); say(HighLine.new.color(@pl.now_playing, :red)) }

    menu.choice(HighLine.new.color("now playing", :magenta)) { say(HighLine.new.color(@pl.now_playing, :red)) }
    menu.choice(HighLine.new.color("view next songs", :magenta)) {print_playlist}
    menu.choice(HighLine.new.color("skip current song", :magenta)) { @pl.next; sleep 1;say(HighLine.new.color(@pl.now_playing, :red)) }
    menu.choice(HighLine.new.color "stop playing and clear playlist", :magenta) { @pl.stop }

    menu.choice(HighLine.new.color "pause playing",:magenta) { @pl.pause; say(HighLine.new.color("pause toggle!", :red)) }
    menu.choice(HighLine.new.color "help and about", :yellow) { say(HighLine.new.color credits, :red) }
    menu.choice("quit") { @pl.stop; exit }
  end
end

